/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShapeResourceAttributes {
  /// Representation of how important a shape is when choosing one for display. Higher number is higher priority.  Negative priority is not important enough to show as they only **MAY** be used. 
  #[serde(rename = "priority")]
  priority: Option<i32>,
  /// ## Encoding/Decoding  [Encoded Polyline Algorithm Format](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)  ## Example Libraries  * [Javascript](https://www.npmjs.com/package/polyline) * [Erlang](https://blog.kempkens.io/posts/encoding-and-decoding-polylines-with-erlang/) * [Elixir](https://hex.pm/packages/polyline) 
  #[serde(rename = "polyline")]
  polyline: Option<String>,
  /// User-facing name for shape. It may, but is not required to, be a headsign
  #[serde(rename = "name")]
  name: Option<String>,
  /// Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  
  #[serde(rename = "direction_id")]
  direction_id: Option<i32>
}

impl ShapeResourceAttributes {
  pub fn new() -> ShapeResourceAttributes {
    ShapeResourceAttributes {
      priority: None,
      polyline: None,
      name: None,
      direction_id: None
    }
  }

  pub fn set_priority(&mut self, priority: i32) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: i32) -> ShapeResourceAttributes {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&i32> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

  pub fn set_polyline(&mut self, polyline: String) {
    self.polyline = Some(polyline);
  }

  pub fn with_polyline(mut self, polyline: String) -> ShapeResourceAttributes {
    self.polyline = Some(polyline);
    self
  }

  pub fn polyline(&self) -> Option<&String> {
    self.polyline.as_ref()
  }

  pub fn reset_polyline(&mut self) {
    self.polyline = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ShapeResourceAttributes {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_direction_id(&mut self, direction_id: i32) {
    self.direction_id = Some(direction_id);
  }

  pub fn with_direction_id(mut self, direction_id: i32) -> ShapeResourceAttributes {
    self.direction_id = Some(direction_id);
    self
  }

  pub fn direction_id(&self) -> Option<&i32> {
    self.direction_id.as_ref()
  }

  pub fn reset_direction_id(&mut self) {
    self.direction_id = None;
  }

}



