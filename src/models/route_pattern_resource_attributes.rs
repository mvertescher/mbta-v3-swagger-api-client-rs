/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RoutePatternResourceAttributes {
  /// Explains how common the route pattern is. For the MBTA, this is within the context of the entire route. Current valid values are: | Value | Description | |-|-| | `0` | Not defined | | `1` | Typical. Pattern is common for the route. Most routes will have only one such pattern per direction. A few routes may have more than 1, such as the Red Line (with one branch to Ashmont and another to Braintree); routes with more than 2 are rare. | | `2` | Pattern is a deviation from the regular route. | | `3` | Pattern represents a highly atypical pattern for the route, such as a special routing which only runs a handful of times per day. | | `4` | Diversions from normal service, such as planned detours, bus shuttles, or snow routes. | 
  #[serde(rename = "typicality")]
  typicality: Option<i32>,
  /// Can be used to order the route patterns in a way which is ideal for presentation to customers. Route patterns with smaller sort_order values should be displayed before those with larger values. 
  #[serde(rename = "sort_order")]
  sort_order: Option<i32>,
  /// User-facing description of where trips on the route pattern serve. These names are published in the form Destination, Destination via Street or Landmark, Origin - Destination, or Origin - Destination via Street or Landmark. Note that names for bus and subway route patterns currently do not include the origin location, but will in the future. 
  #[serde(rename = "name")]
  name: Option<String>,
  /// Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  
  #[serde(rename = "direction_id")]
  direction_id: Option<i32>
}

impl RoutePatternResourceAttributes {
  pub fn new() -> RoutePatternResourceAttributes {
    RoutePatternResourceAttributes {
      typicality: None,
      sort_order: None,
      name: None,
      direction_id: None
    }
  }

  pub fn set_typicality(&mut self, typicality: i32) {
    self.typicality = Some(typicality);
  }

  pub fn with_typicality(mut self, typicality: i32) -> RoutePatternResourceAttributes {
    self.typicality = Some(typicality);
    self
  }

  pub fn typicality(&self) -> Option<&i32> {
    self.typicality.as_ref()
  }

  pub fn reset_typicality(&mut self) {
    self.typicality = None;
  }

  pub fn set_sort_order(&mut self, sort_order: i32) {
    self.sort_order = Some(sort_order);
  }

  pub fn with_sort_order(mut self, sort_order: i32) -> RoutePatternResourceAttributes {
    self.sort_order = Some(sort_order);
    self
  }

  pub fn sort_order(&self) -> Option<&i32> {
    self.sort_order.as_ref()
  }

  pub fn reset_sort_order(&mut self) {
    self.sort_order = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> RoutePatternResourceAttributes {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_direction_id(&mut self, direction_id: i32) {
    self.direction_id = Some(direction_id);
  }

  pub fn with_direction_id(mut self, direction_id: i32) -> RoutePatternResourceAttributes {
    self.direction_id = Some(direction_id);
    self
  }

  pub fn direction_id(&self) -> Option<&i32> {
    self.direction_id.as_ref()
  }

  pub fn reset_direction_id(&mut self) {
    self.direction_id = None;
  }

}



