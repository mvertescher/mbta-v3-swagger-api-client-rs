/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AlertResourceAttributes {
  /// A URL for extra details, such as outline construction or maintenance plans.
  #[serde(rename = "url")]
  url: Option<String>,
  /// Date/Time alert last updated. Format is ISO8601.
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  /// Summarizes when an alert is in effect.
  #[serde(rename = "timeframe")]
  timeframe: Option<String>,
  /// A shortened version of `*_/attributes/header`.
  #[serde(rename = "short_header")]
  short_header: Option<String>,
  /// How severe the alert it from least (`0`) to most (`10`) severe.
  #[serde(rename = "severity")]
  severity: Option<i32>,
  /// Summarizes the service and the impact to that service.
  #[serde(rename = "service_effect")]
  service_effect: Option<String>,
  /// Identifies whether alert is a new or old, in effect or upcoming.  | Value                | |----------------------| | `\"NEW\"`              | | `\"ONGOING\"`          | | `\"ONGOING_UPCOMING\"` | | `\"UPCOMING\"`         |  
  #[serde(rename = "lifecycle")]
  lifecycle: Option<String>,
  /// Entities whose users we should notify of this alert.  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `informed_entity`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert) 
  #[serde(rename = "informed_entity")]
  informed_entity: Option<Vec<::models::InformedEntity>>,
  /// This plain-text string will be highlighted, for example in boldface. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `header_text`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert) 
  #[serde(rename = "header")]
  header: Option<String>,
  /// Name of the alert
  #[serde(rename = "effect_name")]
  effect_name: Option<String>,
  /// The effect of this problem on the affected entity.  | Value | |-------| | `\"ACCESS_ISSUE\"` | | `\"ADDITIONAL_SERVICE\"` | | `\"AMBER_ALERT\"` | | `\"BIKE_ISSUE\"` | | `\"CANCELLATION\"` | | `\"DELAY\"` | | `\"DETOUR\"` | | `\"DOCK_CLOSURE\"` | | `\"DOCK_ISSUE\"` | | `\"ELEVATOR_CLOSURE\"` | | `\"ESCALATOR_CLOSURE\"` | | `\"EXTRA_SERVICE\"` | | `\"FACILITY_ISSUE\"` | | `\"MODIFIED_SERVICE\"` | | `\"NO_SERVICE\"` | | `\"OTHER_EFFECT\"` | | `\"PARKING_CLOSURE\"` | | `\"PARKING_ISSUE\"` | | `\"POLICY_CHANGE\"` | | `\"SCHEDULE_CHANGE\"` | | `\"SERVICE_CHANGE\"` | | `\"SHUTTLE\"` | | `\"SNOW_ROUTE\"` | | `\"STATION_CLOSURE\"` | | `\"STATION_ISSUE\"` | | `\"STOP_CLOSURE\"` | | `\"STOP_MOVE\"` | | `\"STOP_MOVED\"` | | `\"SUMMARY\"` | | `\"SUSPENSION\"` | | `\"TRACK_CHANGE\"` | | `\"UNKNOWN_EFFECT\"` |  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `effect`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)  
  #[serde(rename = "effect")]
  effect: Option<String>,
  /// This plain-text string will be formatted as the body of the alert (or shown on an explicit \"expand\" request by the user). The information in the description should add to the information of the header. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `description_text`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert) 
  #[serde(rename = "description")]
  description: Option<String>,
  /// Date/Time alert created. Format is ISO8601.
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  /// What is causing the alert.  | Value | |-------| | `\"ACCIDENT\"` | | `\"AMTRAK\"` | | `\"AN_EARLIER_MECHANICAL_PROBLEM\"` | | `\"AN_EARLIER_SIGNAL_PROBLEM\"` | | `\"AUTOS_IMPEDING_SERVICE\"` | | `\"COAST_GUARD_RESTRICTION\"` | | `\"CONGESTION\"` | | `\"CONSTRUCTION\"` | | `\"CROSSING_MALFUNCTION\"` | | `\"DEMONSTRATION\"` | | `\"DISABLED_BUS\"` | | `\"DISABLED_TRAIN\"` | | `\"DRAWBRIDGE_BEING_RAISED\"` | | `\"ELECTRICAL_WORK\"` | | `\"FIRE\"` | | `\"FOG\"` | | `\"FREIGHT_TRAIN_INTERFERENCE\"` | | `\"HAZMAT_CONDITION\"` | | `\"HEAVY_RIDERSHIP\"` | | `\"HIGH_WINDS\"` | | `\"HOLIDAY\"` | | `\"HURRICANE\"` | | `\"ICE_IN_HARBOR\"` | | `\"MAINTENANCE\"` | | `\"MECHANICAL_PROBLEM\"` | | `\"MEDICAL_EMERGENCY\"` | | `\"PARADE\"` | | `\"POLICE_ACTION\"` | | `\"POWER_PROBLEM\"` | | `\"SEVERE_WEATHER\"` | | `\"SIGNAL_PROBLEM\"` | | `\"SLIPPERY_RAIL\"` | | `\"SNOW\"` | | `\"SPECIAL_EVENT\"` | | `\"SPEED_RESTRICTION\"` | | `\"SWITCH_PROBLEM\"` | | `\"TIE_REPLACEMENT\"` | | `\"TRACK_PROBLEM\"` | | `\"TRACK_WORK\"` | | `\"TRAFFIC\"` | | `\"UNRULY_PASSENGER\"` | | `\"WEATHER\"` |  See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `Cause`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-cause)  
  #[serde(rename = "cause")]
  cause: Option<String>,
  /// Set if alert is meant to be displayed prominently, such as the top of every page.
  #[serde(rename = "banner")]
  banner: Option<String>,
  /// Date/Time ranges when alert is active. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `active_period`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert). 
  #[serde(rename = "active_period")]
  active_period: Option<Vec<::models::ActivePeriod>>
}

impl AlertResourceAttributes {
  pub fn new() -> AlertResourceAttributes {
    AlertResourceAttributes {
      url: None,
      updated_at: None,
      timeframe: None,
      short_header: None,
      severity: None,
      service_effect: None,
      lifecycle: None,
      informed_entity: None,
      header: None,
      effect_name: None,
      effect: None,
      description: None,
      created_at: None,
      cause: None,
      banner: None,
      active_period: None
    }
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> AlertResourceAttributes {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> AlertResourceAttributes {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_timeframe(&mut self, timeframe: String) {
    self.timeframe = Some(timeframe);
  }

  pub fn with_timeframe(mut self, timeframe: String) -> AlertResourceAttributes {
    self.timeframe = Some(timeframe);
    self
  }

  pub fn timeframe(&self) -> Option<&String> {
    self.timeframe.as_ref()
  }

  pub fn reset_timeframe(&mut self) {
    self.timeframe = None;
  }

  pub fn set_short_header(&mut self, short_header: String) {
    self.short_header = Some(short_header);
  }

  pub fn with_short_header(mut self, short_header: String) -> AlertResourceAttributes {
    self.short_header = Some(short_header);
    self
  }

  pub fn short_header(&self) -> Option<&String> {
    self.short_header.as_ref()
  }

  pub fn reset_short_header(&mut self) {
    self.short_header = None;
  }

  pub fn set_severity(&mut self, severity: i32) {
    self.severity = Some(severity);
  }

  pub fn with_severity(mut self, severity: i32) -> AlertResourceAttributes {
    self.severity = Some(severity);
    self
  }

  pub fn severity(&self) -> Option<&i32> {
    self.severity.as_ref()
  }

  pub fn reset_severity(&mut self) {
    self.severity = None;
  }

  pub fn set_service_effect(&mut self, service_effect: String) {
    self.service_effect = Some(service_effect);
  }

  pub fn with_service_effect(mut self, service_effect: String) -> AlertResourceAttributes {
    self.service_effect = Some(service_effect);
    self
  }

  pub fn service_effect(&self) -> Option<&String> {
    self.service_effect.as_ref()
  }

  pub fn reset_service_effect(&mut self) {
    self.service_effect = None;
  }

  pub fn set_lifecycle(&mut self, lifecycle: String) {
    self.lifecycle = Some(lifecycle);
  }

  pub fn with_lifecycle(mut self, lifecycle: String) -> AlertResourceAttributes {
    self.lifecycle = Some(lifecycle);
    self
  }

  pub fn lifecycle(&self) -> Option<&String> {
    self.lifecycle.as_ref()
  }

  pub fn reset_lifecycle(&mut self) {
    self.lifecycle = None;
  }

  pub fn set_informed_entity(&mut self, informed_entity: Vec<::models::InformedEntity>) {
    self.informed_entity = Some(informed_entity);
  }

  pub fn with_informed_entity(mut self, informed_entity: Vec<::models::InformedEntity>) -> AlertResourceAttributes {
    self.informed_entity = Some(informed_entity);
    self
  }

  pub fn informed_entity(&self) -> Option<&Vec<::models::InformedEntity>> {
    self.informed_entity.as_ref()
  }

  pub fn reset_informed_entity(&mut self) {
    self.informed_entity = None;
  }

  pub fn set_header(&mut self, header: String) {
    self.header = Some(header);
  }

  pub fn with_header(mut self, header: String) -> AlertResourceAttributes {
    self.header = Some(header);
    self
  }

  pub fn header(&self) -> Option<&String> {
    self.header.as_ref()
  }

  pub fn reset_header(&mut self) {
    self.header = None;
  }

  pub fn set_effect_name(&mut self, effect_name: String) {
    self.effect_name = Some(effect_name);
  }

  pub fn with_effect_name(mut self, effect_name: String) -> AlertResourceAttributes {
    self.effect_name = Some(effect_name);
    self
  }

  pub fn effect_name(&self) -> Option<&String> {
    self.effect_name.as_ref()
  }

  pub fn reset_effect_name(&mut self) {
    self.effect_name = None;
  }

  pub fn set_effect(&mut self, effect: String) {
    self.effect = Some(effect);
  }

  pub fn with_effect(mut self, effect: String) -> AlertResourceAttributes {
    self.effect = Some(effect);
    self
  }

  pub fn effect(&self) -> Option<&String> {
    self.effect.as_ref()
  }

  pub fn reset_effect(&mut self) {
    self.effect = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> AlertResourceAttributes {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> AlertResourceAttributes {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_cause(&mut self, cause: String) {
    self.cause = Some(cause);
  }

  pub fn with_cause(mut self, cause: String) -> AlertResourceAttributes {
    self.cause = Some(cause);
    self
  }

  pub fn cause(&self) -> Option<&String> {
    self.cause.as_ref()
  }

  pub fn reset_cause(&mut self) {
    self.cause = None;
  }

  pub fn set_banner(&mut self, banner: String) {
    self.banner = Some(banner);
  }

  pub fn with_banner(mut self, banner: String) -> AlertResourceAttributes {
    self.banner = Some(banner);
    self
  }

  pub fn banner(&self) -> Option<&String> {
    self.banner.as_ref()
  }

  pub fn reset_banner(&mut self) {
    self.banner = None;
  }

  pub fn set_active_period(&mut self, active_period: Vec<::models::ActivePeriod>) {
    self.active_period = Some(active_period);
  }

  pub fn with_active_period(mut self, active_period: Vec<::models::ActivePeriod>) -> AlertResourceAttributes {
    self.active_period = Some(active_period);
    self
  }

  pub fn active_period(&self) -> Option<&Vec<::models::ActivePeriod>> {
    self.active_period.as_ref()
  }

  pub fn reset_active_period(&mut self) {
    self.active_period = None;
  }

}



