/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Line : A JSON-API document with a single [LineResource](#lineresource) resource

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Line {
  #[serde(rename = "links")]
  links: Option<::models::VehicleLinks>,
  /// Included resources
  #[serde(rename = "included")]
  included: Option<Vec<::models::VehicleIncluded>>,
  #[serde(rename = "data")]
  data: ::models::LineResource
}

impl Line {
  /// A JSON-API document with a single [LineResource](#lineresource) resource
  pub fn new(data: ::models::LineResource) -> Line {
    Line {
      links: None,
      included: None,
      data: data
    }
  }

  pub fn set_links(&mut self, links: ::models::VehicleLinks) {
    self.links = Some(links);
  }

  pub fn with_links(mut self, links: ::models::VehicleLinks) -> Line {
    self.links = Some(links);
    self
  }

  pub fn links(&self) -> Option<&::models::VehicleLinks> {
    self.links.as_ref()
  }

  pub fn reset_links(&mut self) {
    self.links = None;
  }

  pub fn set_included(&mut self, included: Vec<::models::VehicleIncluded>) {
    self.included = Some(included);
  }

  pub fn with_included(mut self, included: Vec<::models::VehicleIncluded>) -> Line {
    self.included = Some(included);
    self
  }

  pub fn included(&self) -> Option<&Vec<::models::VehicleIncluded>> {
    self.included.as_ref()
  }

  pub fn reset_included(&mut self) {
    self.included = None;
  }

  pub fn set_data(&mut self, data: ::models::LineResource) {
    self.data = data;
  }

  pub fn with_data(mut self, data: ::models::LineResource) -> Line {
    self.data = data;
    self
  }

  pub fn data(&self) -> &::models::LineResource {
    &self.data
  }


}



