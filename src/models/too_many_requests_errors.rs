/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TooManyRequestsErrors : A JSON-API error when rate limited

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TooManyRequestsErrors {
  /// The HTTP status code applicable to the problem
  #[serde(rename = "status")]
  status: Option<String>,
  /// Human-readable summary of the problem
  #[serde(rename = "detail")]
  detail: Option<String>,
  /// An application-specific error code
  #[serde(rename = "code")]
  code: Option<String>
}

impl TooManyRequestsErrors {
  /// A JSON-API error when rate limited
  pub fn new() -> TooManyRequestsErrors {
    TooManyRequestsErrors {
      status: None,
      detail: None,
      code: None
    }
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> TooManyRequestsErrors {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_detail(&mut self, detail: String) {
    self.detail = Some(detail);
  }

  pub fn with_detail(mut self, detail: String) -> TooManyRequestsErrors {
    self.detail = Some(detail);
    self
  }

  pub fn detail(&self) -> Option<&String> {
    self.detail.as_ref()
  }

  pub fn reset_detail(&mut self) {
    self.detail = None;
  }

  pub fn set_code(&mut self, code: String) {
    self.code = Some(code);
  }

  pub fn with_code(mut self, code: String) -> TooManyRequestsErrors {
    self.code = Some(code);
    self
  }

  pub fn code(&self) -> Option<&String> {
    self.code.as_ref()
  }

  pub fn reset_code(&mut self) {
    self.code = None;
  }

}



