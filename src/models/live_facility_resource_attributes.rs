/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LiveFacilityResourceAttributes {
  /// Time of last update
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  /// A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.
  #[serde(rename = "properties")]
  properties: Option<Vec<::models::FacilityProperty>>
}

impl LiveFacilityResourceAttributes {
  pub fn new() -> LiveFacilityResourceAttributes {
    LiveFacilityResourceAttributes {
      updated_at: None,
      properties: None
    }
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> LiveFacilityResourceAttributes {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_properties(&mut self, properties: Vec<::models::FacilityProperty>) {
    self.properties = Some(properties);
  }

  pub fn with_properties(mut self, properties: Vec<::models::FacilityProperty>) -> LiveFacilityResourceAttributes {
    self.properties = Some(properties);
    self
  }

  pub fn properties(&self) -> Option<&Vec<::models::FacilityProperty>> {
    self.properties.as_ref()
  }

  pub fn reset_properties(&mut self) {
    self.properties = None;
  }

}



