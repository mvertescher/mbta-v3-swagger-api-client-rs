/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RoutePatternResourceRelationships {
  #[serde(rename = "route")]
  route: Option<::models::ShapeResourceRelationshipsRoute>,
  #[serde(rename = "representative_trip")]
  representative_trip: Option<::models::RoutePatternResourceRelationshipsRepresentativeTrip>
}

impl RoutePatternResourceRelationships {
  pub fn new() -> RoutePatternResourceRelationships {
    RoutePatternResourceRelationships {
      route: None,
      representative_trip: None
    }
  }

  pub fn set_route(&mut self, route: ::models::ShapeResourceRelationshipsRoute) {
    self.route = Some(route);
  }

  pub fn with_route(mut self, route: ::models::ShapeResourceRelationshipsRoute) -> RoutePatternResourceRelationships {
    self.route = Some(route);
    self
  }

  pub fn route(&self) -> Option<&::models::ShapeResourceRelationshipsRoute> {
    self.route.as_ref()
  }

  pub fn reset_route(&mut self) {
    self.route = None;
  }

  pub fn set_representative_trip(&mut self, representative_trip: ::models::RoutePatternResourceRelationshipsRepresentativeTrip) {
    self.representative_trip = Some(representative_trip);
  }

  pub fn with_representative_trip(mut self, representative_trip: ::models::RoutePatternResourceRelationshipsRepresentativeTrip) -> RoutePatternResourceRelationships {
    self.representative_trip = Some(representative_trip);
    self
  }

  pub fn representative_trip(&self) -> Option<&::models::RoutePatternResourceRelationshipsRepresentativeTrip> {
    self.representative_trip.as_ref()
  }

  pub fn reset_representative_trip(&mut self) {
    self.representative_trip = None;
  }

}



