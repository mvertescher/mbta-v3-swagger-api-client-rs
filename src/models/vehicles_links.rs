/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct VehiclesLinks {
  /// Link to this page of results
  #[serde(rename = "self")]
  _self: Option<String>,
  /// Link to the previous page of results
  #[serde(rename = "prev")]
  prev: Option<String>,
  /// Link to the next page of results
  #[serde(rename = "next")]
  next: Option<String>,
  /// Link to the last page of results
  #[serde(rename = "last")]
  last: Option<String>,
  /// Link to the first page of results
  #[serde(rename = "first")]
  first: Option<String>
}

impl VehiclesLinks {
  pub fn new() -> VehiclesLinks {
    VehiclesLinks {
      _self: None,
      prev: None,
      next: None,
      last: None,
      first: None
    }
  }

  pub fn set__self(&mut self, _self: String) {
    self._self = Some(_self);
  }

  pub fn with__self(mut self, _self: String) -> VehiclesLinks {
    self._self = Some(_self);
    self
  }

  pub fn _self(&self) -> Option<&String> {
    self._self.as_ref()
  }

  pub fn reset__self(&mut self) {
    self._self = None;
  }

  pub fn set_prev(&mut self, prev: String) {
    self.prev = Some(prev);
  }

  pub fn with_prev(mut self, prev: String) -> VehiclesLinks {
    self.prev = Some(prev);
    self
  }

  pub fn prev(&self) -> Option<&String> {
    self.prev.as_ref()
  }

  pub fn reset_prev(&mut self) {
    self.prev = None;
  }

  pub fn set_next(&mut self, next: String) {
    self.next = Some(next);
  }

  pub fn with_next(mut self, next: String) -> VehiclesLinks {
    self.next = Some(next);
    self
  }

  pub fn next(&self) -> Option<&String> {
    self.next.as_ref()
  }

  pub fn reset_next(&mut self) {
    self.next = None;
  }

  pub fn set_last(&mut self, last: String) {
    self.last = Some(last);
  }

  pub fn with_last(mut self, last: String) -> VehiclesLinks {
    self.last = Some(last);
    self
  }

  pub fn last(&self) -> Option<&String> {
    self.last.as_ref()
  }

  pub fn reset_last(&mut self) {
    self.last = None;
  }

  pub fn set_first(&mut self, first: String) {
    self.first = Some(first);
  }

  pub fn with_first(mut self, first: String) -> VehiclesLinks {
    self.first = Some(first);
    self
  }

  pub fn first(&self) -> Option<&String> {
    self.first.as_ref()
  }

  pub fn reset_first(&mut self) {
    self.first = None;
  }

}



