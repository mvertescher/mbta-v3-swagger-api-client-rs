/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RouteResourceAttributes {
  /// | Value | Name          | Example    | |-------|---------------|------------| | `0`   | Light Rail    | Green Line | | `1`   | Heavy Rail    | Red Line   | | `2`   | Commuter Rail |            | | `3`   | Bus           |            | | `4`   | Ferry         |            | 
  #[serde(rename = "type")]
  _type: Option<i32>,
  /// A legible color to use for text drawn against a background of the route's `color` attribute. See [GTFS `routes.txt` `route_text_color`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
  #[serde(rename = "text_color")]
  text_color: Option<String>,
  /// Routes sort in ascending order
  #[serde(rename = "sort_order")]
  sort_order: Option<i32>,
  /// This will often be a short, abstract identifier like \"32\", \"100X\", or \"Green\" that riders use to identify a route, but which doesn't give any indication of what places the route serves. See [GTFS `routes.txt` `route_short_name`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
  #[serde(rename = "short_name")]
  short_name: Option<String>,
  /// The full name of a route. This name is generally more descriptive than the `short_name` and will often include the route's destination or stop. See [GTFS `routes.txt` `route_long_name`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
  #[serde(rename = "long_name")]
  long_name: Option<String>,
  /// Specifies the fare type of the route, which can differ from the service category. 
  #[serde(rename = "fare_class")]
  fare_class: Option<String>,
  #[serde(rename = "direction_names")]
  direction_names: Option<Vec<String>>,
  #[serde(rename = "direction_destinations")]
  direction_destinations: Option<Vec<String>>,
  /// Details about stops, schedule, and/or service.  See [GTFS `routes.txt` `route_desc`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
  #[serde(rename = "description")]
  description: Option<String>,
  /// A color that corresponds to the route, such as the line color on a map.\" See [GTFS `routes.txt` `route_color`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt). 
  #[serde(rename = "color")]
  color: Option<String>
}

impl RouteResourceAttributes {
  pub fn new() -> RouteResourceAttributes {
    RouteResourceAttributes {
      _type: None,
      text_color: None,
      sort_order: None,
      short_name: None,
      long_name: None,
      fare_class: None,
      direction_names: None,
      direction_destinations: None,
      description: None,
      color: None
    }
  }

  pub fn set__type(&mut self, _type: i32) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: i32) -> RouteResourceAttributes {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&i32> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_text_color(&mut self, text_color: String) {
    self.text_color = Some(text_color);
  }

  pub fn with_text_color(mut self, text_color: String) -> RouteResourceAttributes {
    self.text_color = Some(text_color);
    self
  }

  pub fn text_color(&self) -> Option<&String> {
    self.text_color.as_ref()
  }

  pub fn reset_text_color(&mut self) {
    self.text_color = None;
  }

  pub fn set_sort_order(&mut self, sort_order: i32) {
    self.sort_order = Some(sort_order);
  }

  pub fn with_sort_order(mut self, sort_order: i32) -> RouteResourceAttributes {
    self.sort_order = Some(sort_order);
    self
  }

  pub fn sort_order(&self) -> Option<&i32> {
    self.sort_order.as_ref()
  }

  pub fn reset_sort_order(&mut self) {
    self.sort_order = None;
  }

  pub fn set_short_name(&mut self, short_name: String) {
    self.short_name = Some(short_name);
  }

  pub fn with_short_name(mut self, short_name: String) -> RouteResourceAttributes {
    self.short_name = Some(short_name);
    self
  }

  pub fn short_name(&self) -> Option<&String> {
    self.short_name.as_ref()
  }

  pub fn reset_short_name(&mut self) {
    self.short_name = None;
  }

  pub fn set_long_name(&mut self, long_name: String) {
    self.long_name = Some(long_name);
  }

  pub fn with_long_name(mut self, long_name: String) -> RouteResourceAttributes {
    self.long_name = Some(long_name);
    self
  }

  pub fn long_name(&self) -> Option<&String> {
    self.long_name.as_ref()
  }

  pub fn reset_long_name(&mut self) {
    self.long_name = None;
  }

  pub fn set_fare_class(&mut self, fare_class: String) {
    self.fare_class = Some(fare_class);
  }

  pub fn with_fare_class(mut self, fare_class: String) -> RouteResourceAttributes {
    self.fare_class = Some(fare_class);
    self
  }

  pub fn fare_class(&self) -> Option<&String> {
    self.fare_class.as_ref()
  }

  pub fn reset_fare_class(&mut self) {
    self.fare_class = None;
  }

  pub fn set_direction_names(&mut self, direction_names: Vec<String>) {
    self.direction_names = Some(direction_names);
  }

  pub fn with_direction_names(mut self, direction_names: Vec<String>) -> RouteResourceAttributes {
    self.direction_names = Some(direction_names);
    self
  }

  pub fn direction_names(&self) -> Option<&Vec<String>> {
    self.direction_names.as_ref()
  }

  pub fn reset_direction_names(&mut self) {
    self.direction_names = None;
  }

  pub fn set_direction_destinations(&mut self, direction_destinations: Vec<String>) {
    self.direction_destinations = Some(direction_destinations);
  }

  pub fn with_direction_destinations(mut self, direction_destinations: Vec<String>) -> RouteResourceAttributes {
    self.direction_destinations = Some(direction_destinations);
    self
  }

  pub fn direction_destinations(&self) -> Option<&Vec<String>> {
    self.direction_destinations.as_ref()
  }

  pub fn reset_direction_destinations(&mut self) {
    self.direction_destinations = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> RouteResourceAttributes {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_color(&mut self, color: String) {
    self.color = Some(color);
  }

  pub fn with_color(mut self, color: String) -> RouteResourceAttributes {
    self.color = Some(color);
    self
  }

  pub fn color(&self) -> Option<&String> {
    self.color.as_ref()
  }

  pub fn reset_color(&mut self) {
    self.color = None;
  }

}



