/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServiceResourceAttributes {
  #[serde(rename = "valid_days")]
  valid_days: Option<Vec<f32>>,
  /// Earliest date which is valid for this service. Format is ISO8601.
  #[serde(rename = "start_date")]
  start_date: Option<String>,
  /// Describes how well this schedule represents typical service for the listed `schedule_type`  | Value | Description                                                                 | |-------|-----------------------------------------------------------------------------| | `0`   | Not defined.                                                                | | `1`   | Typical service with perhaps minor modifications                            | | `2`   | Extra service supplements typical schedules                                 | | `3`   | Reduced holiday service is provided by typical Saturday or Sunday schedule  | | `4`   | Major changes in service due to a planned disruption, such as construction  | | `5`   | Major reductions in service for weather events or other atypical situations | 
  #[serde(rename = "schedule_typicality")]
  schedule_typicality: Option<i32>,
  /// Description of the schedule type the service_id can be applied. For example, on a holiday, the schedule_type value may be \"Saturday\" or \"Sunday\". Current valid values are \"Weekday\", \"Saturday\", \"Sunday\", or \"Other\" 
  #[serde(rename = "schedule_type")]
  schedule_type: Option<String>,
  /// Description of when the `service_id` is in effect.
  #[serde(rename = "schedule_name")]
  schedule_name: Option<String>,
  #[serde(rename = "removed_dates_notes")]
  removed_dates_notes: Option<Vec<String>>,
  #[serde(rename = "removed_dates")]
  removed_dates: Option<Vec<String>>,
  /// Latest date which is valid for this service. Format is ISO8601.
  #[serde(rename = "end_date")]
  end_date: Option<String>,
  /// Human-readable description of the service, as it should appear on public-facing websites and applications.
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "added_dates_notes")]
  added_dates_notes: Option<Vec<String>>,
  #[serde(rename = "added_dates")]
  added_dates: Option<Vec<String>>
}

impl ServiceResourceAttributes {
  pub fn new() -> ServiceResourceAttributes {
    ServiceResourceAttributes {
      valid_days: None,
      start_date: None,
      schedule_typicality: None,
      schedule_type: None,
      schedule_name: None,
      removed_dates_notes: None,
      removed_dates: None,
      end_date: None,
      description: None,
      added_dates_notes: None,
      added_dates: None
    }
  }

  pub fn set_valid_days(&mut self, valid_days: Vec<f32>) {
    self.valid_days = Some(valid_days);
  }

  pub fn with_valid_days(mut self, valid_days: Vec<f32>) -> ServiceResourceAttributes {
    self.valid_days = Some(valid_days);
    self
  }

  pub fn valid_days(&self) -> Option<&Vec<f32>> {
    self.valid_days.as_ref()
  }

  pub fn reset_valid_days(&mut self) {
    self.valid_days = None;
  }

  pub fn set_start_date(&mut self, start_date: String) {
    self.start_date = Some(start_date);
  }

  pub fn with_start_date(mut self, start_date: String) -> ServiceResourceAttributes {
    self.start_date = Some(start_date);
    self
  }

  pub fn start_date(&self) -> Option<&String> {
    self.start_date.as_ref()
  }

  pub fn reset_start_date(&mut self) {
    self.start_date = None;
  }

  pub fn set_schedule_typicality(&mut self, schedule_typicality: i32) {
    self.schedule_typicality = Some(schedule_typicality);
  }

  pub fn with_schedule_typicality(mut self, schedule_typicality: i32) -> ServiceResourceAttributes {
    self.schedule_typicality = Some(schedule_typicality);
    self
  }

  pub fn schedule_typicality(&self) -> Option<&i32> {
    self.schedule_typicality.as_ref()
  }

  pub fn reset_schedule_typicality(&mut self) {
    self.schedule_typicality = None;
  }

  pub fn set_schedule_type(&mut self, schedule_type: String) {
    self.schedule_type = Some(schedule_type);
  }

  pub fn with_schedule_type(mut self, schedule_type: String) -> ServiceResourceAttributes {
    self.schedule_type = Some(schedule_type);
    self
  }

  pub fn schedule_type(&self) -> Option<&String> {
    self.schedule_type.as_ref()
  }

  pub fn reset_schedule_type(&mut self) {
    self.schedule_type = None;
  }

  pub fn set_schedule_name(&mut self, schedule_name: String) {
    self.schedule_name = Some(schedule_name);
  }

  pub fn with_schedule_name(mut self, schedule_name: String) -> ServiceResourceAttributes {
    self.schedule_name = Some(schedule_name);
    self
  }

  pub fn schedule_name(&self) -> Option<&String> {
    self.schedule_name.as_ref()
  }

  pub fn reset_schedule_name(&mut self) {
    self.schedule_name = None;
  }

  pub fn set_removed_dates_notes(&mut self, removed_dates_notes: Vec<String>) {
    self.removed_dates_notes = Some(removed_dates_notes);
  }

  pub fn with_removed_dates_notes(mut self, removed_dates_notes: Vec<String>) -> ServiceResourceAttributes {
    self.removed_dates_notes = Some(removed_dates_notes);
    self
  }

  pub fn removed_dates_notes(&self) -> Option<&Vec<String>> {
    self.removed_dates_notes.as_ref()
  }

  pub fn reset_removed_dates_notes(&mut self) {
    self.removed_dates_notes = None;
  }

  pub fn set_removed_dates(&mut self, removed_dates: Vec<String>) {
    self.removed_dates = Some(removed_dates);
  }

  pub fn with_removed_dates(mut self, removed_dates: Vec<String>) -> ServiceResourceAttributes {
    self.removed_dates = Some(removed_dates);
    self
  }

  pub fn removed_dates(&self) -> Option<&Vec<String>> {
    self.removed_dates.as_ref()
  }

  pub fn reset_removed_dates(&mut self) {
    self.removed_dates = None;
  }

  pub fn set_end_date(&mut self, end_date: String) {
    self.end_date = Some(end_date);
  }

  pub fn with_end_date(mut self, end_date: String) -> ServiceResourceAttributes {
    self.end_date = Some(end_date);
    self
  }

  pub fn end_date(&self) -> Option<&String> {
    self.end_date.as_ref()
  }

  pub fn reset_end_date(&mut self) {
    self.end_date = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ServiceResourceAttributes {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_added_dates_notes(&mut self, added_dates_notes: Vec<String>) {
    self.added_dates_notes = Some(added_dates_notes);
  }

  pub fn with_added_dates_notes(mut self, added_dates_notes: Vec<String>) -> ServiceResourceAttributes {
    self.added_dates_notes = Some(added_dates_notes);
    self
  }

  pub fn added_dates_notes(&self) -> Option<&Vec<String>> {
    self.added_dates_notes.as_ref()
  }

  pub fn reset_added_dates_notes(&mut self) {
    self.added_dates_notes = None;
  }

  pub fn set_added_dates(&mut self, added_dates: Vec<String>) {
    self.added_dates = Some(added_dates);
  }

  pub fn with_added_dates(mut self, added_dates: Vec<String>) -> ServiceResourceAttributes {
    self.added_dates = Some(added_dates);
    self
  }

  pub fn added_dates(&self) -> Option<&Vec<String>> {
    self.added_dates.as_ref()
  }

  pub fn reset_added_dates(&mut self) {
    self.added_dates = None;
  }

}



