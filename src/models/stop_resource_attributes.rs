/* 
 * MBTA
 *
 * MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api
 *
 * OpenAPI spec version: 3.0
 * Contact: developer@mbta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StopResourceAttributes {
  /// Whether there are any vehicles with wheelchair boarding or paths to stops that are wheelchair acessible: 0, 1, 2.  Wheelchair boarding (`*_/attributes/wheelchair_boarding`) corresponds to [GTFS wheelchair_boarding](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt). The MBTA handles parent station inheritance itself, so value can be treated simply:  | Value | Meaning                                       | |-------|-----------------------------------------------| | `0`   | No Information                                | | `1`   | Accessible (if trip is wheelchair accessible) | | `2`   | Inaccessible                                  |  
  #[serde(rename = "wheelchair_boarding")]
  wheelchair_boarding: Option<i32>,
  /// Name of a stop or station in the local and tourist vernacular.  See [GTFS `stops.txt` `stop_name](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt) 
  #[serde(rename = "name")]
  name: Option<String>,
  /// Longitude of the stop or station. Degrees East, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system. See [GTFS `stops.txt` `stop_lon`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt). 
  #[serde(rename = "longitude")]
  longitude: Option<f32>,
  /// The type of the stop.  | Value | Type | Description | | - | - | - | | `0` | Stop | A location where passengers board or disembark from a transit vehicle. | | `1` | Station | A physical structure or area that contains one or more stops. | | `2` | Station Entrance/Exit | A location where passengers can enter or exit a station from the street. The stop entry must also specify a parent_station value referencing the stop ID of the parent station for the entrance. | | `3` | Generic Node | A location within a station, not matching any other location_type, which can be used to link together pathways defined in pathways.txt. |  See also [GTFS `stops.txt` `location_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt). 
  #[serde(rename = "location_type")]
  location_type: Option<i32>,
  /// Latitude of the stop or station.  Degrees North, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system. See [GTFS `stops.txt` `stop_lat`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt). 
  #[serde(rename = "latitude")]
  latitude: Option<f32>
}

impl StopResourceAttributes {
  pub fn new() -> StopResourceAttributes {
    StopResourceAttributes {
      wheelchair_boarding: None,
      name: None,
      longitude: None,
      location_type: None,
      latitude: None
    }
  }

  pub fn set_wheelchair_boarding(&mut self, wheelchair_boarding: i32) {
    self.wheelchair_boarding = Some(wheelchair_boarding);
  }

  pub fn with_wheelchair_boarding(mut self, wheelchair_boarding: i32) -> StopResourceAttributes {
    self.wheelchair_boarding = Some(wheelchair_boarding);
    self
  }

  pub fn wheelchair_boarding(&self) -> Option<&i32> {
    self.wheelchair_boarding.as_ref()
  }

  pub fn reset_wheelchair_boarding(&mut self) {
    self.wheelchair_boarding = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> StopResourceAttributes {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_longitude(&mut self, longitude: f32) {
    self.longitude = Some(longitude);
  }

  pub fn with_longitude(mut self, longitude: f32) -> StopResourceAttributes {
    self.longitude = Some(longitude);
    self
  }

  pub fn longitude(&self) -> Option<&f32> {
    self.longitude.as_ref()
  }

  pub fn reset_longitude(&mut self) {
    self.longitude = None;
  }

  pub fn set_location_type(&mut self, location_type: i32) {
    self.location_type = Some(location_type);
  }

  pub fn with_location_type(mut self, location_type: i32) -> StopResourceAttributes {
    self.location_type = Some(location_type);
    self
  }

  pub fn location_type(&self) -> Option<&i32> {
    self.location_type.as_ref()
  }

  pub fn reset_location_type(&mut self) {
    self.location_type = None;
  }

  pub fn set_latitude(&mut self, latitude: f32) {
    self.latitude = Some(latitude);
  }

  pub fn with_latitude(mut self, latitude: f32) -> StopResourceAttributes {
    self.latitude = Some(latitude);
    self
  }

  pub fn latitude(&self) -> Option<&f32> {
    self.latitude.as_ref()
  }

  pub fn reset_latitude(&mut self) {
    self.latitude = None;
  }

}



